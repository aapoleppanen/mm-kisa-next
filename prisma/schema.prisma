// schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Team {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  homeMatches Match[] @relation("homeMatchs")
  awayMatches Match[] @relation("awayMatchs")
  crest       String
  winningOdds Int     @default(0)
  User        User[]
}

model Match {
  id          Int      @id @default(autoincrement())
  startTime   DateTime
  homeId      Int
  awayId      Int
  homeGoals   Int?
  awayGoals   Int?
  home        Team     @relation(name: "homeMatchs", fields: [homeId], references: [id])
  away        Team     @relation(name: "awayMatchs", fields: [awayId], references: [id])
  Pick        Pick[]   @relation("matchPicks")
  awayWinOdds Int      @default(0)
  homeWinOdds Int      @default(0)
  drawOdds    Int      @default(0)
  result      Result? // "HOME_TEAM | "AWAY_TEAM" | "DRAW" | "NO_RESULT"
}

model Player {
  id   Int    @id @default(autoincrement())
  name String @unique
  odds Int    @default(0)
  User User[]
}

enum Result {
  HOME_TEAM
  AWAY_TEAM
  DRAW
  NO_RESULT
}

model Pick {
  id           Int     @id @default(autoincrement())
  matchId      Int
  match        Match   @relation(name: "matchPicks", fields: [matchId], references: [id])
  userId       String
  user         User    @relation(name: "userPicks", fields: [userId], references: [id])
  pickedResult Result? // "AWAY | "HOME" | "DRAW" // this is the picked result of the user
  betAmount    Float   @default(0) @db.Real

  @@index([userId, matchId])
  @@unique([userId, matchId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  picks         Pick[]    @relation("userPicks")
  winnerPick    Team?     @relation(fields: [teamId], references: [id])
  topScorerPick Player?   @relation(fields: [playerId], references: [id])
  accounts      Account[]
  sessions      Session[]
  teamId        Int?
  playerId      Int?
  credits       Float     @default(500) @db.Real
  remainingCredits Float  @default(0) @db.Real
  points        Float     @default(0) @db.Real

  @@index([id])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
